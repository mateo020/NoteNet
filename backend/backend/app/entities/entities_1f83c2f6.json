{
  "Linked Lists": "A data structure that is used to implement the List ADT (Abstract Data Type). It consists of nodes where each node contains a data field and a reference(link) to the next node in the list. It is used to overcome the efficiency shortcomings of array-based implementations of the list ADT, such as Python lists.",
  "Python Lists": "An array-based implementation of the List ADT in Python. It has some drawbacks such as the need to shift many elements in the program’s memory when inserting and deleting items.",
  "List ADT": "Abstract Data Type that represents a countable number of ordered values, where the same value may occur more than once. An ADT is an abstraction of a data structure that provides a defined interface.",
  "Node": "A basic unit of a data structure, such as a linked list, that contains data and one or more links to other nodes. The node is a key component of linked lists.",
  "LinkedList class": "A class in Python that represents the linked list itself. It is designed to be used by client code and implements methods that obey the same interface as the built-in list class.",
  "_Node class": "A private class in Python that represents a node in a linked list. It contains an item (the data) and a reference to the next node in the list.",
  "links": "In the context of linked lists, links are references to the next element or node in the list. They connect the nodes in the linked list.",
  "Memory": "In the context of this text, memory refers to the computer's storage where programs and data are held.",
  "Efficiency": "In the context of data structures, efficiency refers to how well a data structure performs certain operations such as insertion, deletion, and searching.",
  "nums": "An example variable that could either be a Python list or an instance of the LinkedList class.",
  "indexing": "A method to access a specific element in a data structure, such as a list, using its numerical index. In the context of this text, the author is discussing how to make list indexing work on instances of the LinkedList class.",
  "contiguous slots in memory": "Refers to the way elements are stored in a Python list, where each element is placed next to the previous one in the computer's memory.",
  "Private Attributes": "Attributes that are meant to be used only within the class they are defined and not by client code. In the context of this text, _first is a private attribute of the LinkedList class.",
  "node1": "A _Node object containing the number 10, used in the context of a linked list.",
  "node1.item": "The number 10, which is the value contained within the _Node object 'node1'.",
  "node2": "A _Node object containing the number 20, used in the context of a linked list.",
  "node3": "A _Node object containing the number 30, used in the context of a linked list.",
  "linky": "A LinkedList object that is initially empty, but eventually represents the list [10, 20, 30] after nodes are linked.",
  "LinkedList()": "A constructor for creating a new LinkedList object.",
  "_Node()": "A constructor for creating a new _Node object, which is used to store values in a linked list.",
  "_first": "An attribute of the LinkedList object 'linky', which refers to the first node in the linked list.",
  "next": "An attribute of a _Node object, which refers to the next node in a linked list.",
  "memory model diagrams": "Visual representations of the memory used by data structures, such as linked lists, in a programming context.",
  "Python’s array-based lists": "A type of data structure in Python that stores elements in contiguous memory locations.",
  "preceding underscore": "A convention in Python indicating that a class or attribute is intended to be private, meaning it should not be accessed directly by client code."
}